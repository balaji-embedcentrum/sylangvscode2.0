# Sylang Project Rules and AI Development Guidelines
# This file provides comprehensive context for AI development of Sylang projects

project_name: "Sylang Model-Based Systems Engineering Project"
language: "Sylang"
version: "2.7.5"
domain: "Model-Based Systems Engineering, Digital Twin, Feature Modeling"

# CRITICAL: Only these 9 extensions are fully implemented and working
implemented_extensions:
  - .ple (Product Line Engineering) - COMPLETE
  - .fml (Feature Model) - COMPLETE  
  - .vml (Variant Model) - COMPLETE
  - .vcf (Variant Configuration) - COMPLETE
  - .blk (Block Definition) - COMPLETE
  - .fun (Function Definition) - COMPLETE
  - .req (Requirement Definition) - COMPLETE
  - .tst (Test Definition) - COMPLETE
  - .spr (Sprint Definition) - COMPLETE
  - .agt (Agent Definition) - COMPLETE

planned_extensions:
  - .phy (Physical Models) - PLANNED
  - .sim (Simulation Models) - PLANNED
  - .cal (Calibration) - PLANNED

# REAL SYLANG FILE STRUCTURE EXAMPLES

## .ple FILES (Product Line Engineering)
# Rule: ONE hdef productline, NO def statements, NO use statements
ple_example: |
  hdef productline BloodPressureProductLine
    name "Blood Pressure Monitoring System Product Line"
    description "Comprehensive digital blood pressure monitoring system for home and clinical use"
    owner "Medical Device Engineering Team"
    domain "medical-devices", "health-monitoring", "connected-health"
    compliance "ISO 14971", "IEC 62304", "ISO 13485"
    firstrelease "2025-06-01"
    tags "blood-pressure", "sphygmomanometer", "digital-health"
    safetylevel ASIL-C
    region "Global", "North America", "Europe"

## .fml FILES (Feature Model)  
# Rule: ONE hdef featureset, MULTIPLE def feature (hierarchical), uses productline
fml_example: |
  use productline BloodPressureProductLine

  hdef featureset BloodPressureFeatures
    name "Blood Pressure Monitoring Feature Set"
    description "Complete feature model for digital blood pressure monitoring system"
    owner "Product Engineering Team"
    tags "features", "blood-pressure", "medical-device"
    listedfor ref productline BloodPressureProductLine

    def feature BloodPressureMeasurement mandatory
      name "Core Blood Pressure Measurement"
      description "Primary blood pressure measurement functionality"
      owner "Biomedical Engineering Team"
      tags "measurement", "core-function", "safety-critical"
      safetylevel ASIL-C

      def feature AutomaticMeasurement mandatory
        name "Automatic Measurement Function"
        description "Automated blood pressure measurement with cuff inflation"
        owner "Measurement Engineering Team"
        tags "automatic", "measurement"

      def feature ManualMeasurement optional
        name "Manual Measurement Function"  
        description "Manual blood pressure measurement mode"
        owner "Measurement Engineering Team"
        tags "manual", "measurement"

    def feature UserInterface optional
      name "User Interface Features"
      description "User interaction and display capabilities"
      
      def feature Display alternative
        name "Display Options"
        
        def feature LCDDisplay
          name "LCD Display"
          
        def feature LEDDisplay  
          name "LED Display"

## .vml FILES (Variant Model)
# Rule: ONE hdef variantset, NO def statements, ONLY extends ref feature statements
vml_example: |
  use featureset BloodPressureFeatures

  hdef variantset BasicBloodPressureVariant
    name "Basic Blood Pressure Monitor Variant"
    description "Configuration for basic home-use blood pressure monitor"
    owner "Product Configuration Team"
    tags "variant", "basic", "home-use"

  extends ref feature BloodPressureMeasurement mandatory selected
  extends ref feature AutomaticMeasurement mandatory selected
  extends ref feature ManualMeasurement optional
  extends ref feature UserInterface optional selected
  extends ref feature Display alternative selected
  extends ref feature LCDDisplay alternative selected

## .vcf FILES (Variant Configuration)
# Rule: ONE hdef configset, MULTIPLE def config statements
vcf_example: |
  use variantset BasicBloodPressureVariant

  hdef configset BasicBloodPressureConfig
    name "Basic Blood Pressure Monitor Configuration"
    description "Auto-generated configuration from BasicBloodPressureVariant.vml variant model selections"
    owner "Product Engineering"
    generatedfrom ref variantset BasicBloodPressureVariant
    tags "variant", "config", "auto-generated"

  def config c_BloodPressureMeasurement 1
  def config c_AutomaticMeasurement 1
  def config c_ManualMeasurement 0
  def config c_UserInterface 1
  def config c_Display 1
  def config c_LCDDisplay 1
  def config c_LEDDisplay 0

## .fun FILES (Function Definition)  
# Rule: ONE hdef functionset, MULTIPLE def function/parameter, can use configs
fun_example: |
  use featureset BloodPressureFeatures
  use configset BasicBloodPressureConfig

  hdef functionset MeasurementFunctions
    name "Blood Pressure Measurement Functions"
    description "Core functions for blood pressure measurement and processing"
    owner "Software Engineering Team"
    tags "functions", "measurement", "signal-processing"

    def function CalculateBloodPressure
      name "Blood Pressure Calculation"
      description "Calculate systolic and diastolic pressure from sensor data"
      owner "Algorithm Team"
      tags "calculation", "core-algorithm"
      when ref config c_BloodPressureMeasurement

## .blk FILES (Block Definition)
# Rule: ONE hdef block, MULTIPLE def port, can use configs and relations
blk_example: |
  use block MeasurementSubsystem
  use featureset BloodPressureFeatures
  use configset BloodPressureConfig

  hdef block BloodPressureMonitoringSystem
    name "Blood Pressure Monitoring System"
    description "Complete WiFi-enabled clinical blood pressure monitoring system"
    level system
    when ref config c_BloodPressureMeasurement
    owner "Systems Engineering Team"
    tags "blood-pressure", "system", "medical-device", "WiFi"
    safetylevel ASIL-C
    composedof ref block MeasurementSubsystem
    enables ref feature UserInterface
    designrationale "Modular system design for clinical accuracy and connectivity"

    def port BloodPressureResults
      name "Blood Pressure Measurement Results"
      description "Systolic and diastolic pressure readings with metadata"
      when ref config c_BloodPressureMeasurement
      porttype data
      owner "Measurement Team"
      safetylevel ASIL-C
      tags "measurement", "clinical-data", "patient-data"
    
    def port WiFiDataStream
      name "WiFi Data Transmission"
      description "Encrypted patient data transmission over WiFi"
      when ref config c_WiFiConnectivity
      porttype communication
      owner "Connectivity Team"
      safetylevel ASIL-B
      tags "WiFi", "encrypted", "patient-data"

    needs ref port CuffPressureInput

## .req FILES (Requirement Definition)
# Rule: ONE hdef reqset, MULTIPLE def requirement (hierarchical), traceability relations
req_example: |
  use functionset BloodPressureFunctions
  use block MeasurementSubsystem
  use configset BloodPressureConfig

  hdef reqset BloodPressureSystemRequirements
    name "Blood Pressure Monitoring System Requirements Specification"
    description "Complete requirements for WiFi-enabled clinical blood pressure monitoring system"
    owner "Requirements Engineering Team"
    tags "requirements", "system-level", "medical-device"
    when ref config c_BloodPressureMeasurement

    def requirement REQ_MEAS_001
      name "Blood Pressure Measurement Accuracy"
      description "WHEN performing blood pressure measurement THE system SHALL provide systolic and diastolic readings accurate to Â±3 mmHg"
      when ref config c_BloodPressureMeasurement
      rationale "Clinical accuracy requirements per FDA guidelines"
      verificationcriteria "Comparison against calibrated reference equipment"
      status approved
      reqtype functional
      owner "Biomedical Engineering"
      safetylevel ASIL-C
      implements ref function CalculateBloodPressure
      allocatedto ref block MeasurementSubsystem

    def requirement REQ_RESP_001
      name "System Response Time"
      description "THE system SHALL complete blood pressure measurement within 120 seconds"
      when ref config c_AutomaticMeasurement
      rationale "User experience and clinical workflow requirements"
      verificationcriteria "Timing validation under normal operating conditions"
      status approved
      reqtype performance
      owner "Systems Engineering"
      safetylevel ASIL-B

      def requirement REQ_PROC_001
        name "Signal Processing Delay"
        description "Signal processing algorithms SHALL introduce no more than 2 seconds delay"
        rationale "Contributes to overall response time requirement"
        verificationcriteria "Software timing analysis and testing"
        refinedfrom ref requirement REQ_RESP_001
        status approved
        reqtype performance

## .tst FILES (Test Definition)
# Rule: ONE hdef testset, MULTIPLE def test/procedure, validation relations
tst_example: |
  use reqset BloodPressureSystemRequirements
  use functionset BloodPressureFunctions
  use configset BloodPressureConfig

  hdef testset BloodPressureValidationTests
    name "Blood Pressure Monitoring System Validation Test Suite"
    description "Comprehensive validation tests for blood pressure monitoring system"
    owner "Test Engineering Team"
    tags "validation", "system-test", "medical-device"
    when ref config c_BloodPressureMeasurement

    def test TEST_MEAS_001_ACCURACY
      name "Blood Pressure Measurement Accuracy Validation"
      description "Validate measurement accuracy against reference standard equipment"
      when ref config c_BloodPressureMeasurement
      satisfies ref requirement REQ_MEAS_001
      method SIL
      setup "Device in normal operating mode, standard adult cuff, calibrated reference equipment"
      list steps
        step "Connect device to reference pressure source"
        step "Initiate measurement sequence"
        step "Record device readings and reference values"
        step "Calculate accuracy deviation"
      expected "All readings within Â±3 mmHg of reference values"
      passcriteria "100% of measurements meet accuracy requirement"
      safetylevel ASIL-C
      testresult pending
      owner "Validation Team"

    def test TEST_RESP_001_TIMING
      name "System Response Time Validation"
      description "Validate measurement completion time under normal conditions"
      when ref config c_AutomaticMeasurement
      satisfies ref requirement REQ_RESP_001
      method HIL
      setup "Device in normal operating mode, simulated patient conditions"
      list steps
        step "Initiate measurement using start button"
        step "Record timestamp at measurement start"
        step "Monitor measurement progress"
        step "Record timestamp at measurement completion"
      expected "Measurement completes within 120 seconds"
      passcriteria "All measurements complete within time limit"
      safetylevel ASIL-B
      testresult pass
      owner "Performance Team"

      def parameter SampleRate
        name "Sensor Sample Rate"
        value "1000Hz"
        range "500-2000Hz"

      def parameter FilterCutoff
        name "Signal Filter Cutoff Frequency"
        value "50Hz"
        range "10-100Hz"

    def function DisplayResults
      name "Display Measurement Results"
      description "Show blood pressure readings on device display"
      owner "UI Team"  
      tags "display", "user-interface"
      when ref config c_UserInterface

## .blk FILES (Block Definition)
# Rule: ONE hdef block, MULTIPLE def port/internal/parameter, can use configs  
blk_example: |
  use functionset MeasurementFunctions
  use configset BasicBloodPressureConfig

  hdef block PressureSensorBlock
    name "Pressure Sensor Block"
    description "Hardware block for pressure sensing and signal conditioning"
    owner "Hardware Engineering Team"
    tags "hardware", "sensor", "pressure"
    when ref config c_BloodPressureMeasurement

    def port pressure_analog_out
      name "Pressure Analog Output"
      direction "output"
      type "analog"
      range "0-5V"
      units "volts"

    def port power_in
      name "Power Input"
      direction "input"  
      type "power"
      voltage "3.3V"
      current "50mA"

    def internal signal_conditioning
      name "Signal Conditioning Circuit"
      description "Amplifies and filters pressure sensor signal"
      implements ref function CalculateBloodPressure

## .req FILES (Requirement Definition)
# Rule: ONE hdef requirementset, MULTIPLE def requirement (hierarchical)
req_example: |
  use functionset MeasurementFunctions

  hdef requirementset SafetyRequirements
    name "Blood Pressure Monitor Safety Requirements"
    description "Safety and regulatory requirements for medical device"
    owner "Safety Engineering Team"
    tags "safety", "requirements", "medical-device"
    standard "IEC 62304"
    criticality "high"

    def requirement REQ_AccuracyLimit
      name "Measurement Accuracy Requirement"
      text "Blood pressure readings shall be accurate within Â±3 mmHg or Â±2% of reading"
      priority "critical"
      verification "test"
      traces ref function CalculateBloodPressure

    def requirement REQ_ResponseTime
      name "System Response Time Requirement"
      text "System shall complete measurement within 60 seconds"
      priority "high"
      verification "test"

      def requirement REQ_ProcessingDelay
        name "Signal Processing Delay Requirement"
        text "Signal processing delay shall not exceed 100ms"
        priority "medium"
        verification "simulation"

## .tst FILES (Test Definition)
# Rule: ONE hdef testset, MULTIPLE def test/procedure
tst_example: |
  use requirementset SafetyRequirements
  use functionset MeasurementFunctions

  hdef testset AccuracyValidationTests
    name "Blood Pressure Accuracy Validation Tests"
    description "Test suite for validating measurement accuracy requirements"
    owner "Test Engineering Team"
    tags "test", "validation", "accuracy"
    framework "automated"
    environment "test-bench"

    def test TEST_AccuracyValidation
      name "Blood Pressure Accuracy Validation Test"
      description "Validate accuracy against reference standard"
      procedure "Apply known pressures, measure readings, compare to reference"
      validates ref requirement REQ_AccuracyLimit
      expected "All readings within Â±3 mmHg tolerance"
      duration "2 hours"

    def test TEST_ResponseTimeValidation
      name "Response Time Validation Test"
      description "Validate system response time under normal conditions"
      validates ref requirement REQ_ResponseTime
      expected "Measurement completion within 60 seconds"
      duration "30 minutes"

    def procedure StandardTestSetup
      name "Standard Test Environment Setup"
      description "Setup procedure for accuracy testing"
      steps "1. Connect reference equipment, 2. Calibrate sensors, 3. Initialize test sequence"
      prerequisites "Calibrated reference pressure equipment"

## .spr FILES (Sprint/Project Planning)
# Rule: ONE hdef sprint, MULTIPLE def epic/story/task (hierarchical), agent references
spr_example: |
  use agentset ProjectAgents

  hdef sprint EPBSystemDevelopmentSprint
    name "Electric Park Brake System Development Sprint"
    description "Complete EPB system design, requirements, and testing"
    owner "Engineering Team Lead"
    startdate "2025-01-28"
    enddate "2025-02-14"

    def epic EPBSystemDesign
      name "EPB System Architecture Design"
      description "Design complete Electric Park Brake system architecture with functions and safety requirements"
      assignedto ref agent SystemsEngineerAgent
      issuestatus open
      priority high

      def task EPBFunctionDefinition
        name "EPB Function Definition"
        description "Define core functions for Electric Park Brake system including engagement, release, emergency brake, and hill hold functionality"
        assignedto ref agent SystemsEngineerAgent
        issuestatus open
        priority high
        outputfile "functions/EPBFunctions.fun"

      def task EPBSafetyRequirements
        name "EPB Safety Requirements"
        description "Define comprehensive safety requirements for EPB system including ASIL-D compliance, fail-safe mechanisms, and diagnostic coverage"
        assignedto ref agent RequirementsEngineerAgent
        issuestatus backlog
        priority critical
        outputfile "requirements/EPBSafetyRequirements.req"

    def epic EPBSystemValidation
      name "EPB System Testing Strategy"
      description "Develop comprehensive testing strategy for EPB system validation and verification"
      assignedto ref agent TestEngineerAgent
      issuestatus backlog
      priority medium

      def task EPBTestSuite
        name "EPB Test Suite Definition"
        description "Create comprehensive test suite covering functional, safety, and performance testing for Electric Park Brake system"
        assignedto ref agent TestEngineerAgent
        issuestatus backlog
        priority medium
        points "8"
        outputfile "tests/EPBTestSuite.tst"

## .agt FILES (Agent Definition)
# Rule: ONE hdef agentset, MULTIPLE def agent (with roles and specializations)
agt_example: |
  hdef agentset ProjectAgents
    name "Engineering Project Agents"
    description "AI agents specialized for automotive systems engineering tasks"
    owner "AI Engineering Team"

    def agent SystemsEngineerAgent
      name "Systems Engineering Agent"
      description "Specialized in automotive systems architecture and design"
      role "Systems Engineer"
      specialization "Automotive Systems Architecture"
      expertise "System decomposition", "Safety analysis", "Requirements allocation"
      context "Electric vehicle systems", "ASIL compliance", "ISO 26262"

    def agent RequirementsEngineerAgent
      name "Requirements Engineering Agent"
      description "Expert in automotive safety requirements and compliance"
      role "Requirements Engineer"
      specialization "Safety Requirements Engineering"
      expertise "ASIL analysis", "Functional safety", "Requirements traceability"
      context "ISO 26262", "Automotive safety", "Regulatory compliance"

    def agent TestEngineerAgent
      name "Test Engineering Agent"
      description "Specialized in automotive testing strategies and validation"
      role "Test Engineer"
      specialization "Automotive Testing and Validation"
      expertise "Test case design", "HIL testing", "Validation strategies"
      context "Automotive testing", "Safety validation", "Test automation"

# Multiple def Rules by File Type
def_statement_rules:
  .ple: "NO def statements - only hdef productline with properties"
  .fml: "MULTIPLE def feature allowed - hierarchical features with constraints"
  .vml: "AUTO-GENERATED - Do not create manually, use right-click command on .fml"
  .vcf: "AUTO-GENERATED - Do not create manually, use right-click command on .vml"
  .blk: "MULTIPLE def port allowed - hardware/software component definitions"
  .fun: "MULTIPLE def function/parameter allowed - behavioral specifications"
  .req: "MULTIPLE def requirement allowed - hierarchical requirements with traceability"
  .tst: "MULTIPLE def test allowed - validation test cases and procedures"
  .spr: "MULTIPLE def epic/story/task allowed - hierarchical project planning"
  .agt: "MULTIPLE def agent allowed - specialized AI agents"

# Core Language Rules - ACTUAL SYLANG SYNTAX
core_syntax:
  header_definition: "hdef <type> <identifier>"  # Only ONE per file
  symbol_definition: "def <type> <identifier> [optional_flags]"  # Multiple allowed except .ple/.vml
  property_statement: "<property> <value>"  # Properties indented under parent
  relation_statement: "<relation> ref <target> <identifier>"  # Cross-file references
  conditional_visibility: "when ref config <config_identifier>"  # Config-based graying
  import_statement: "use <type> <identifier>"  # Import external symbols
  
indentation_rules:
  - Use 2 spaces or tab per indentation level
  - Parent-child relationships through indentation
  - Properties and relations indented under their parent symbols

# Valid Keywords by File Type
valid_keywords:
  .ple: ["hdef", "productline", "name", "description", "owner", "domain", "compliance", "firstrelease", "tags", "safetylevel", "region"]
  .fml: ["use", "hdef", "featureset", "listedfor", "def", "feature", "name", "description", "owner", "tags", "safetylevel", "requires", "excludes", "mandatory", "optional", "or", "alternative"]
  .vml: ["AUTO-GENERATED - use command: Generate VML from FML"]
  .vcf: ["AUTO-GENERATED - use command: Generate VCF from VML"]
  .fun: ["use", "hdef", "functionset", "def", "function", "parameter", "name", "description", "owner", "tags", "safetylevel", "enables", "allocatedto", "when", "ref", "config"]
  .blk: ["use", "hdef", "block", "def", "port", "name", "description", "designrationale", "owner", "tags", "level", "safetylevel", "porttype", "composedof", "enables", "needs", "when", "ref", "config"]
  .req: ["use", "hdef", "reqset", "def", "requirement", "name", "description", "owner", "tags", "rationale", "verificationcriteria", "status", "reqtype", "safetylevel", "refinedfrom", "derivedfrom", "implements", "allocatedto", "when", "ref", "config"]
  .tst: ["use", "hdef", "testset", "def", "test", "name", "description", "owner", "tags", "safetylevel", "setup", "passcriteria", "testresult", "expected", "method", "list", "steps", "step", "satisfies", "derivedfrom", "refinedfrom", "when", "ref", "config"]
  .spr: ["use", "hdef", "sprint", "def", "epic", "story", "task", "name", "description", "owner", "startdate", "enddate", "issuestatus", "priority", "assignedto", "points", "outputfile"]
  .agt: ["use", "hdef", "agentset", "def", "agent", "name", "description", "owner", "role", "specialization", "expertise", "context"]

# File-Specific Rules
file_rules:
  .ple: "Root file - no use statements, no def statements, only properties under hdef productline"
  .fml: "Feature hierarchy - uses productline, hierarchical def feature with mandatory/optional/or/alternative flags"
  .vml: "AUTO-GENERATED from .fml - variant selection with extends ref feature statements"
  .vcf: "AUTO-GENERATED from .vml - configuration values with def config statements (0/1 values)"
  .fun: "Function definitions - uses imports, def function/parameter, supports when ref config for graying"
  .blk: "Block definitions - uses imports, def port for interfaces, supports relations and when ref config"
  .req: "Requirements - uses imports, hierarchical def requirement with traceability relations"
  .tst: "Test definitions - uses imports, def test cases with validation relations"
  .spr: "Sprint definitions - uses imports, hierarchical def epic/story/task with agent references"
  .agt: "Agent definitions - uses imports, def agent with roles and specializations"

# Folder Structure Rules
folder_structure_rules:
  limitations:
    - "One .fml file per folder - Only one feature model allowed per folder"
    - "One .vcf file per folder - Only one configuration file allowed per folder"
    - "Multiple .vml files per folder - Multiple variant definitions allowed per folder"
  
  project_organization:
    - "Organize files in hierarchical folders: productline/, systems/, subsystems/, modules/"
    - "Each folder can contain one .fml, one .vcf, and multiple .vml files"
    - "Use inherits relation to connect hierarchical levels"
    - "Example: ProductLine.fml â System.fml â Subsystem.fml"
  
  validation:
    - "Multiple .fml files in same folder: Error - Only one .fml file allowed per folder"
    - "Multiple .vcf files in same folder: Error - Only one .vcf file allowed per folder"
    - "Multiple .vml files in same folder: Allowed - Different variant definitions"

# Auto-Generation Commands
auto_generation_commands:
  .vml_from_fml: "Right-click .fml file â 'Generate VML from FML'"
  .vcf_from_vml: "Right-click .vml file â 'Generate VCF from VML'"
  note: "AI should NOT create .vml or .vcf files manually - instruct users to use these commands"

# Config-Based Feature Management  
config_system:
  - Config definitions: "def config <name> <0|1>" (in .vcf files)
  - Symbol visibility: "when ref config <config_name>" (in .fun/.blk/.req/.tst files)
  - Graying behavior: config=0 makes symbols gray and functionally unavailable
  - File restrictions: when ref config NOT allowed in .ple/.fml/.vml/.vcf files

# Cross-File Relationships - ACTUAL PATTERNS
relationship_validation:
  valid_patterns:
    - "listedfor ref productline <identifier>" (in .fml)
    - "generatedfrom ref variantset <identifier>" (in .vcf)
    - "extends ref feature <identifier> [flags]" (in .vml)
    - "requires ref feature <identifier1>, <identifier2>" (in .fml)
    - "excludes ref feature <identifier1>, <identifier2>" (in .fml)
    - "implements ref function <identifier>" (in .blk)
    - "traces ref function <identifier>" (in .req)
    - "validates ref requirement <identifier>" (in .tst)
    - "when ref config <identifier>" (in .fun/.blk/.req/.tst)
    - "inherits ref featureset <identifier>" (in .fml)
    - "inherits ref variantset <identifier>" (in .vml)
    - "inherits ref configset <identifier>" (in .vcf)
    - "assignedto ref agent <identifier>" (in .spr)
    - "assignedto ref epic <identifier>" (in .spr)
    - "assignedto ref story <identifier>" (in .spr)
    - "assignedto ref task <identifier>" (in .spr)

# Relation Cardinality Rules
relation_cardinality:
  single_identifier:
    - "extends ref feature <identifier>" - One feature per extends relation
    - "inherits ref featureset <identifier>" - One featureset per inherits relation
    - "inherits ref variantset <identifier>" - One variantset per inherits relation
    - "inherits ref configset <identifier>" - One configset per inherits relation
    - "listedfor ref productline <identifier>" - One productline per listedfor relation
    - "generatedfrom ref variantset <identifier>" - One variantset per generatedfrom relation
    - "allocatedto ref block <identifier>" - One block per allocatedto relation
    - "assignedto ref agent <identifier>" - One agent per assignedto relation
    - "assignedto ref epic <identifier>" - One epic per assignedto relation
    - "assignedto ref story <identifier>" - One story per assignedto relation
    - "assignedto ref task <identifier>" - One task per assignedto relation
  
  multiple_identifiers:
    - "enables ref feature <identifier1>, <identifier2>, <identifier3>" - Multiple features per enables relation
    - "requires ref feature <identifier1>, <identifier2>" - Multiple features per requires relation
    - "excludes ref feature <identifier1>, <identifier2>" - Multiple features per excludes relation
    - "composedof ref block <identifier1>, <identifier2>, <identifier3>" - Multiple blocks per composedof relation
    - "needs ref port <identifier1>, <identifier2>" - Multiple ports per needs relation
    - "assignedto ref agent <identifier1>, <identifier2>" - Multiple agents per assignedto relation
    - "assignedto ref epic <identifier1>, <identifier2>" - Multiple epics per assignedto relation
    - "assignedto ref story <identifier1>, <identifier2>" - Multiple stories per assignedto relation
    - "assignedto ref task <identifier1>, <identifier2>" - Multiple tasks per assignedto relation

# FML Sibling Validation Rules
fml_sibling_rules:
  - "If one sibling is mandatory or optional, all siblings must be mandatory or optional"
  - "If one sibling is or, all siblings must be or"
  - "If one sibling is alternative, all siblings must be alternative"
  - "Siblings are features at same indentation level under same parent"

# VML Selection Validation Rules  
vml_constraints:
  mandatory_features: "Must be selected if parent is selected"
  optional_features: "May be selected if parent is selected"
  alternative_groups: "Exactly one feature must be selected in group"
  or_groups: "At least one feature must be selected in group"
  selection_propagation: "Parent selection enables child validation"

# AI Development Guidelines
ai_instructions:
  file_creation:
    - Always start with appropriate use statements (except .ple)
    - Follow with single hdef statement  
    - Use only valid keywords for each file type
    - Follow indentation hierarchy (2 spaces or tab)
    - Use when ref config only in .fun/.blk/.req/.tst files
    - Reference valid symbols from imported files
    
  symbol_naming:
    - Use CamelCase for identifiers
    - Descriptive names reflecting purpose
    - Consistent naming across related files
    - Follow c_FeatureName pattern for configs
    
  validation_awareness:
    - .fml sibling consistency rules
    - .vml selection constraint rules  
    - Cross-file symbol resolution
    - Config-based graying behavior

last_updated: "2025-07-29T23:01:34.540Z"
generated_by: "Sylang VSCode Extension v2.7.5"
