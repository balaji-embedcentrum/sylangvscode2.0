# Sylang Project Rules and AI Development Guidelines
# This file provides comprehensive context for AI development of Sylang projects

project_name: "Sylang Model-Based Systems Engineering Project"
language: "Sylang"
version: "2.4.0"
domain: "Model-Based Systems Engineering, Digital Twin, Feature Modeling"

# CRITICAL: Only these 7 extensions are fully implemented and working
implemented_extensions:
  - .ple (Product Line Engineering) - COMPLETE
  - .fml (Feature Model) - COMPLETE  
  - .vml (Variant Model) - COMPLETE
  - .vcf (Variant Configuration) - COMPLETE
  - .blk (Block Definition) - COMPLETE
  - .fun (Function Definition) - COMPLETE
  - .req (Requirement Definition) - COMPLETE
  - .tst (Test Definition) - COMPLETE

planned_extensions:
  - .phy (Physical Models) - PLANNED
  - .sim (Simulation Models) - PLANNED
  - .cal (Calibration) - PLANNED

# REAL SYLANG FILE STRUCTURE EXAMPLES

## .ple FILES (Product Line Engineering)
# Rule: ONE hdef productline, NO def statements, NO use statements
ple_example: |
  hdef productline BloodPressureProductLine
    name "Blood Pressure Monitoring System Product Line"
    description "Comprehensive digital blood pressure monitoring system for home and clinical use"
    owner "Medical Device Engineering Team"
    domain "medical-devices", "health-monitoring", "connected-health"
    compliance "ISO 14971", "IEC 62304", "ISO 13485"
    firstrelease "2025-06-01"
    tags "blood-pressure", "sphygmomanometer", "digital-health"
    safetylevel ASIL-C
    region "Global", "North America", "Europe"

## .fml FILES (Feature Model)  
# Rule: ONE hdef featureset, MULTIPLE def feature (hierarchical), uses productline
fml_example: |
  use productline BloodPressureProductLine

  hdef featureset BloodPressureFeatures
    name "Blood Pressure Monitoring Feature Set"
    description "Complete feature model for digital blood pressure monitoring system"
    owner "Product Engineering Team"
    tags "features", "blood-pressure", "medical-device"
    listedfor ref productline BloodPressureProductLine

    def feature BloodPressureMeasurement mandatory
      name "Core Blood Pressure Measurement"
      description "Primary blood pressure measurement functionality"
      owner "Biomedical Engineering Team"
      tags "measurement", "core-function", "safety-critical"
      safetylevel ASIL-C

      def feature AutomaticMeasurement mandatory
        name "Automatic Measurement Function"
        description "Automated blood pressure measurement with cuff inflation"
        owner "Measurement Engineering Team"
        tags "automatic", "measurement"

      def feature ManualMeasurement optional
        name "Manual Measurement Function"  
        description "Manual blood pressure measurement mode"
        owner "Measurement Engineering Team"
        tags "manual", "measurement"

## .vml FILES (Variant Model)
# Rule: ONE hdef variantset, NO def statements, ONLY extends ref feature statements
vml_example: |
  use featureset BloodPressureFeatures

  hdef variantset BasicBloodPressureVariant
    name "Basic Blood Pressure Monitor Variant"
    description "Configuration for basic home-use blood pressure monitor"
    owner "Product Configuration Team"
    tags "variant", "basic", "home-use"

  extends ref feature BloodPressureMeasurement mandatory selected
  extends ref feature AutomaticMeasurement mandatory selected
  extends ref feature ManualMeasurement optional

## .vcf FILES (Variant Configuration)
# Rule: ONE hdef configset, MULTIPLE def config statements
vcf_example: |
  use variantset BasicBloodPressureVariant

  hdef configset BasicBloodPressureConfig
    name "Basic Blood Pressure Monitor Configuration"
    description "Auto-generated configuration from BasicBloodPressureVariant.vml variant model selections"
    owner "Product Engineering"
    generatedfrom ref variantset BasicBloodPressureVariant
    tags "variant", "config", "auto-generated"

  def config c_BloodPressureMeasurement 1
  def config c_AutomaticMeasurement 1
  def config c_ManualMeasurement 0

## .fun FILES (Function Definition)  
# Rule: ONE hdef functionset, MULTIPLE def function/parameter, can use configs
fun_example: |
  use featureset BloodPressureFeatures
  use configset BasicBloodPressureConfig

  hdef functionset MeasurementFunctions
    name "Blood Pressure Measurement Functions"
    description "Core functions for blood pressure measurement and processing"
    owner "Software Engineering Team"
    tags "functions", "measurement", "signal-processing"

    def function CalculateBloodPressure
      name "Blood Pressure Calculation"
      description "Calculate systolic and diastolic pressure from sensor data"
      owner "Algorithm Team"
      tags "calculation", "core-algorithm"
      when ref config c_BloodPressureMeasurement

# Multiple def Rules by File Type
def_statement_rules:
  .ple: "NO def statements - only hdef productline with properties"
  .fml: "MULTIPLE def feature allowed - hierarchical features with constraints"
  .vml: "NO def statements - only extends ref feature statements"
  .vcf: "MULTIPLE def config allowed - configuration value definitions"
  .blk: "MULTIPLE def port/internal/parameter allowed"
  .fun: "MULTIPLE def function/parameter allowed"
  .req: "MULTIPLE def requirement allowed - hierarchical requirements"
  .tst: "MULTIPLE def test/procedure allowed"

# Valid Keywords by File Type
valid_keywords:
  .ple: ["hdef", "productline", "name", "description", "owner", "domain", "compliance", "firstrelease", "tags", "safetylevel", "region"]
  .fml: ["use", "hdef", "featureset", "listedfor", "def", "feature", "name", "description", "owner", "tags", "safetylevel", "requires", "excludes", "mandatory", "optional", "or", "alternative"]
  .vml: ["use", "hdef", "variantset", "extends", "ref", "feature", "name", "description", "owner", "tags", "mandatory", "optional", "or", "alternative", "selected"]
  .vcf: ["use", "hdef", "configset", "generatedfrom", "def", "config", "name", "description", "owner", "tags"]
  .fun: ["use", "hdef", "functionset", "def", "function", "parameter", "name", "description", "owner", "tags", "when", "ref", "config"]

# AI Development Guidelines
ai_instructions:
  file_creation:
    - Always start with appropriate use statements (except .ple)
    - Follow with single hdef statement  
    - Use only valid keywords for each file type
    - Follow indentation hierarchy (2 spaces or tab)
    - Use when ref config only in .fun/.blk/.req/.tst files
    - Reference valid symbols from imported files
    
  symbol_naming:
    - Use CamelCase for identifiers
    - Descriptive names reflecting purpose
    - Consistent naming across related files
    - Follow c_FeatureName pattern for configs

last_updated: "2024-07-22T13:36:00.000Z"
generated_by: "Sylang VSCode Extension v2.4.0" 